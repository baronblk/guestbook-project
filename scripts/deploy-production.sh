#!/bin/bash

# üöÄ Production Deployment Script
# Automatische Aktualisierung des Guestbook-Projekts auf dem Produktionsserver

set -e  # Exit on any error

echo "üöÄ Starting Guestbook Project Deployment..."
echo "=================================================="

# Konfiguration
DOCKER_IMAGE="ghcr.io/baronblk/guestbook-project/combined:latest"
CONTAINER_NAME="guestbook-combined"
PRODUCTION_URL="http://192.168.2.12:3000"

echo "üì¶ Docker Image: $DOCKER_IMAGE"
echo "üè∑Ô∏è  Container Name: $CONTAINER_NAME"
echo "üåê Production URL: $PRODUCTION_URL"
echo ""

# Funktion: Docker Container Status pr√ºfen
check_container_status() {
    if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
        echo "‚úÖ Container '$CONTAINER_NAME' is running"
        return 0
    else
        echo "‚ùå Container '$CONTAINER_NAME' is not running"
        return 1
    fi
}

# Funktion: Gesundheitspr√ºfung
health_check() {
    echo "üîç Performing health check..."
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$PRODUCTION_URL/health" > /dev/null 2>&1; then
            echo "‚úÖ Health check passed! Application is responding."
            return 0
        fi
        
        echo "‚è≥ Attempt $attempt/$max_attempts - Health check failed, retrying in 10 seconds..."
        sleep 10
        ((attempt++))
    done
    
    echo "‚ùå Health check failed after $max_attempts attempts"
    return 1
}

# Funktion: Backup erstellen
create_backup() {
    echo "üíæ Creating backup of current deployment..."
    
    if check_container_status; then
        # Container l√§uft - Backup der Datenbank erstellen
        docker exec $CONTAINER_NAME mysqldump -u root -p"$MYSQL_ROOT_PASSWORD" guestbook > "backup_$(date +%Y%m%d_%H%M%S).sql"
        echo "‚úÖ Database backup created"
    else
        echo "‚ö†Ô∏è  Container not running - skipping backup"
    fi
}

# Funktion: Rollback durchf√ºhren
rollback() {
    echo "üîÑ Rolling back to previous version..."
    
    # Aktuellen Container stoppen
    if check_container_status; then
        echo "üõë Stopping current container..."
        docker stop $CONTAINER_NAME || true
        docker rm $CONTAINER_NAME || true
    fi
    
    # Zu vorheriger Version zur√ºckkehren (falls vorhanden)
    if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "guestbook-project.*backup"; then
        echo "üîÑ Starting backup container..."
        # Hier w√ºrde der Backup-Container gestartet werden
        echo "‚ö†Ô∏è  Manual rollback required - check backup containers"
    else
        echo "‚ùå No backup version found for rollback"
    fi
    
    exit 1
}

# Hauptdeployment-Prozess
main() {
    echo "üîÑ Starting deployment process..."
    
    # 1. Backup erstellen
    create_backup
    
    # 2. Neuestes Image pullen
    echo "üì• Pulling latest Docker image..."
    if docker pull $DOCKER_IMAGE; then
        echo "‚úÖ Successfully pulled latest image"
    else
        echo "‚ùå Failed to pull Docker image"
        exit 1
    fi
    
    # 3. Aktuellen Container stoppen (falls vorhanden)
    if check_container_status; then
        echo "üõë Stopping current container..."
        docker stop $CONTAINER_NAME
        docker rm $CONTAINER_NAME
        echo "‚úÖ Container stopped and removed"
    fi
    
    # 4. Neuen Container starten
    echo "üöÄ Starting new container..."
    if docker-compose -f docker-compose.yml up -d; then
        echo "‚úÖ Container started successfully"
    else
        echo "‚ùå Failed to start container"
        rollback
    fi
    
    # 5. Warten auf Container-Start
    echo "‚è≥ Waiting for container to be ready..."
    sleep 30
    
    # 6. Gesundheitspr√ºfung
    if health_check; then
        echo "üéâ Deployment successful!"
        echo ""
        echo "üìä Deployment Summary:"
        echo "====================="
        echo "üöÄ Container: $CONTAINER_NAME"
        echo "üì¶ Image: $DOCKER_IMAGE"
        echo "üåê URL: $PRODUCTION_URL"
        echo "‚è∞ Deployed: $(date)"
        echo ""
        echo "‚úÖ Your Guestbook application is now running with the latest changes!"
        echo "üîß Comment moderation is now active - new comments require admin approval."
    else
        echo "‚ùå Deployment failed - health check unsuccessful"
        rollback
    fi
}

# Script-Ausf√ºhrung mit Fehlerbehandlung
trap 'echo "‚ùå Deployment failed with error on line $LINENO"' ERR

# Pr√ºfung, ob Docker l√§uft
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running or not accessible"
    exit 1
fi

# Pr√ºfung, ob docker-compose verf√ºgbar ist
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose is not installed or not in PATH"
    exit 1
fi

# Hauptfunktion ausf√ºhren
main

echo ""
echo "üéØ Next Steps:"
echo "=============="
echo "1. Visit $PRODUCTION_URL to verify the application"
echo "2. Test comment moderation in the admin dashboard"
echo "3. Check that new comments require approval"
echo "4. Monitor logs: docker logs $CONTAINER_NAME"
echo ""
echo "üìö For more information, see docs/DEPLOYMENT.md"
