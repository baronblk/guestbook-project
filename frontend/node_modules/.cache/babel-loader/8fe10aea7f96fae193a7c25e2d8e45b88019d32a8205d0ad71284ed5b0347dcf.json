{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { adminApi, apiUtils } from '../api';\nexport const useAuthStore = create()(persist((set, get) => ({\n  user: null,\n  token: null,\n  loading: false,\n  error: null,\n  login: async credentials => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const tokenResponse = await adminApi.login(credentials);\n\n      // Store token\n      localStorage.setItem('admin_token', tokenResponse.access_token);\n      set({\n        token: tokenResponse.access_token,\n        user: {\n          username: credentials.username,\n          // Mock user data - in real app, fetch user details\n          id: 1,\n          email: '',\n          is_active: true,\n          is_superuser: true,\n          created_at: new Date().toISOString()\n        },\n        loading: false\n      });\n      return true;\n    } catch (error) {\n      set({\n        error: apiUtils.handleApiError(error),\n        loading: false\n      });\n      return false;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('admin_token');\n    set({\n      user: null,\n      token: null,\n      error: null\n    });\n  },\n  checkAuth: () => {\n    const token = localStorage.getItem('admin_token');\n    if (token) {\n      set({\n        token,\n        // In real app, validate token and fetch user data\n        user: {\n          id: 1,\n          username: 'admin',\n          email: 'admin@guestbook.local',\n          is_active: true,\n          is_superuser: true,\n          created_at: new Date().toISOString()\n        }\n      });\n    }\n  },\n  clearError: () => set({\n    error: null\n  })\n}), {\n  name: 'auth-storage',\n  partialize: state => ({\n    token: state.token,\n    user: state.user\n  })\n}));","map":{"version":3,"names":["create","persist","adminApi","apiUtils","useAuthStore","set","get","user","token","loading","error","login","credentials","tokenResponse","localStorage","setItem","access_token","username","id","email","is_active","is_superuser","created_at","Date","toISOString","handleApiError","logout","removeItem","checkAuth","getItem","clearError","name","partialize","state"],"sources":["/Users/renesuss/Development/Tools/src/guestbook-project/frontend/src/store/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { AuthStore, LoginForm, AdminUser } from '../types';\nimport { adminApi, apiUtils } from '../api';\n\nexport const useAuthStore = create<AuthStore>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      loading: false,\n      error: null,\n\n      login: async (credentials: LoginForm) => {\n        set({ loading: true, error: null });\n        try {\n          const tokenResponse = await adminApi.login(credentials);\n          \n          // Store token\n          localStorage.setItem('admin_token', tokenResponse.access_token);\n          \n          set({\n            token: tokenResponse.access_token,\n            user: { \n              username: credentials.username,\n              // Mock user data - in real app, fetch user details\n              id: 1,\n              email: '',\n              is_active: true,\n              is_superuser: true,\n              created_at: new Date().toISOString()\n            } as AdminUser,\n            loading: false,\n          });\n\n          return true;\n        } catch (error) {\n          set({\n            error: apiUtils.handleApiError(error),\n            loading: false,\n          });\n          return false;\n        }\n      },\n\n      logout: () => {\n        localStorage.removeItem('admin_token');\n        set({\n          user: null,\n          token: null,\n          error: null,\n        });\n      },\n\n      checkAuth: () => {\n        const token = localStorage.getItem('admin_token');\n        if (token) {\n          set({ \n            token,\n            // In real app, validate token and fetch user data\n            user: {\n              id: 1,\n              username: 'admin',\n              email: 'admin@guestbook.local',\n              is_active: true,\n              is_superuser: true,\n              created_at: new Date().toISOString()\n            }\n          });\n        }\n      },\n\n      clearError: () => set({ error: null }),\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({ \n        token: state.token,\n        user: state.user \n      }),\n    }\n  )\n);\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,oBAAoB;AAE5C,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,QAAQ;AAE3C,OAAO,MAAMC,YAAY,GAAGJ,MAAM,CAAY,CAAC,CAC7CC,OAAO,CACL,CAACI,GAAG,EAAEC,GAAG,MAAM;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EAEXC,KAAK,EAAE,MAAOC,WAAsB,IAAK;IACvCP,GAAG,CAAC;MAAEI,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACnC,IAAI;MACF,MAAMG,aAAa,GAAG,MAAMX,QAAQ,CAACS,KAAK,CAACC,WAAW,CAAC;;MAEvD;MACAE,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,aAAa,CAACG,YAAY,CAAC;MAE/DX,GAAG,CAAC;QACFG,KAAK,EAAEK,aAAa,CAACG,YAAY;QACjCT,IAAI,EAAE;UACJU,QAAQ,EAAEL,WAAW,CAACK,QAAQ;UAC9B;UACAC,EAAE,EAAE,CAAC;UACLC,KAAK,EAAE,EAAE;UACTC,SAAS,EAAE,IAAI;UACfC,YAAY,EAAE,IAAI;UAClBC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACrC,CAAc;QACdf,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,GAAG,CAAC;QACFK,KAAK,EAAEP,QAAQ,CAACsB,cAAc,CAACf,KAAK,CAAC;QACrCD,OAAO,EAAE;MACX,CAAC,CAAC;MACF,OAAO,KAAK;IACd;EACF,CAAC;EAEDiB,MAAM,EAAEA,CAAA,KAAM;IACZZ,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC;IACtCtB,GAAG,CAAC;MACFE,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXE,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC;EAEDkB,SAAS,EAAEA,CAAA,KAAM;IACf,MAAMpB,KAAK,GAAGM,YAAY,CAACe,OAAO,CAAC,aAAa,CAAC;IACjD,IAAIrB,KAAK,EAAE;MACTH,GAAG,CAAC;QACFG,KAAK;QACL;QACAD,IAAI,EAAE;UACJW,EAAE,EAAE,CAAC;UACLD,QAAQ,EAAE,OAAO;UACjBE,KAAK,EAAE,uBAAuB;UAC9BC,SAAS,EAAE,IAAI;UACfC,YAAY,EAAE,IAAI;UAClBC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACrC;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAEDM,UAAU,EAAEA,CAAA,KAAMzB,GAAG,CAAC;IAAEK,KAAK,EAAE;EAAK,CAAC;AACvC,CAAC,CAAC,EACF;EACEqB,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAGC,KAAK,KAAM;IACtBzB,KAAK,EAAEyB,KAAK,CAACzB,KAAK;IAClBD,IAAI,EAAE0B,KAAK,CAAC1B;EACd,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}