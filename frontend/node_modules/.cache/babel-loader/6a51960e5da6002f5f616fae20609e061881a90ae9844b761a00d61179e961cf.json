{"ast":null,"code":"import { create } from 'zustand';\nimport { publicApi, adminApi, apiUtils } from '../api';\nexport const useReviewStore = create((set, get) => ({\n  reviews: [],\n  loading: false,\n  error: null,\n  filter: {\n    sort_by: 'created_at',\n    sort_order: 'desc'\n  },\n  filters: {\n    sort_by: 'created_at',\n    sort_order: 'desc'\n  },\n  pagination: {\n    page: 1,\n    per_page: 10,\n    total: 0,\n    total_pages: 0\n  },\n  fetchReviews: async filter => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const {\n        filters,\n        pagination\n      } = get();\n      const params = {\n        page: pagination.page,\n        per_page: pagination.per_page,\n        ...filters,\n        ...filter\n      };\n      const response = await publicApi.getReviews(params);\n      set({\n        reviews: response.reviews,\n        pagination: {\n          page: response.page,\n          per_page: response.per_page,\n          total: response.total,\n          total_pages: response.total_pages\n        },\n        loading: false\n      });\n      return {\n        total: response.total,\n        reviews: response.reviews\n      };\n    } catch (error) {\n      set({\n        error: apiUtils.handleApiError(error),\n        loading: false\n      });\n      throw error;\n    }\n  },\n  createReview: async reviewData => {\n    try {\n      const review = await publicApi.createReview(reviewData);\n\n      // Upload image if provided\n      if (reviewData.image) {\n        await publicApi.uploadReviewImage(review.id, reviewData.image);\n      }\n\n      // Refresh reviews\n      await get().fetchReviews();\n      return true;\n    } catch (error) {\n      set({\n        error: apiUtils.handleApiError(error)\n      });\n      return false;\n    }\n  },\n  deleteReview: async id => {\n    try {\n      await adminApi.deleteReview(id);\n      // Remove from local state\n      set(state => ({\n        reviews: state.reviews.filter(review => review.id !== id)\n      }));\n    } catch (error) {\n      set({\n        error: apiUtils.handleApiError(error)\n      });\n      throw error;\n    }\n  },\n  toggleReviewVisibility: async id => {\n    try {\n      const review = get().reviews.find(r => r.id === id);\n      if (!review) return;\n      await adminApi.updateReview(id, {\n        is_approved: !review.is_approved\n      });\n\n      // Update local state\n      set(state => ({\n        reviews: state.reviews.map(r => r.id === id ? {\n          ...r,\n          is_approved: !r.is_approved,\n          is_visible: !r.is_approved\n        } : r)\n      }));\n    } catch (error) {\n      set({\n        error: apiUtils.handleApiError(error)\n      });\n      throw error;\n    }\n  },\n  updateFilters: newFilters => {\n    set(state => ({\n      filters: {\n        ...state.filters,\n        ...newFilters\n      },\n      filter: {\n        ...state.filter,\n        ...newFilters\n      },\n      pagination: {\n        ...state.pagination,\n        page: 1\n      } // Reset to first page\n    }));\n    // Auto-fetch with new filters\n    setTimeout(() => get().fetchReviews(), 100);\n  },\n  setFilter: newFilter => {\n    set(state => ({\n      filter: newFilter,\n      filters: newFilter,\n      pagination: {\n        ...state.pagination,\n        page: 1\n      }\n    }));\n  },\n  setPage: page => {\n    set(state => ({\n      pagination: {\n        ...state.pagination,\n        page\n      }\n    }));\n    get().fetchReviews();\n  },\n  clearError: () => set({\n    error: null\n  })\n}));","map":{"version":3,"names":["create","publicApi","adminApi","apiUtils","useReviewStore","set","get","reviews","loading","error","filter","sort_by","sort_order","filters","pagination","page","per_page","total","total_pages","fetchReviews","params","response","getReviews","handleApiError","createReview","reviewData","review","image","uploadReviewImage","id","deleteReview","state","toggleReviewVisibility","find","r","updateReview","is_approved","map","is_visible","updateFilters","newFilters","setTimeout","setFilter","newFilter","setPage","clearError"],"sources":["/Users/renesuss/Development/Tools/src/guestbook-project/frontend/src/store/reviewStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { ReviewStore, ReviewFilters, ReviewFilter, CreateReviewForm } from '../types';\nimport { publicApi, adminApi, apiUtils } from '../api';\n\nexport const useReviewStore = create<ReviewStore>((set, get) => ({\n  reviews: [],\n  loading: false,\n  error: null,\n  filter: {\n    sort_by: 'created_at',\n    sort_order: 'desc',\n  },\n  filters: {\n    sort_by: 'created_at',\n    sort_order: 'desc',\n  },\n  pagination: {\n    page: 1,\n    per_page: 10,\n    total: 0,\n    total_pages: 0,\n  },\n\n  fetchReviews: async (filter?: ReviewFilter) => {\n    set({ loading: true, error: null });\n    try {\n      const { filters, pagination } = get();\n      const params = {\n        page: pagination.page,\n        per_page: pagination.per_page,\n        ...filters,\n        ...filter,\n      };\n\n      const response = await publicApi.getReviews(params);\n      \n      set({\n        reviews: response.reviews,\n        pagination: {\n          page: response.page,\n          per_page: response.per_page,\n          total: response.total,\n          total_pages: response.total_pages,\n        },\n        loading: false,\n      });\n\n      return { total: response.total, reviews: response.reviews };\n    } catch (error) {\n      set({\n        error: apiUtils.handleApiError(error),\n        loading: false,\n      });\n      throw error;\n    }\n  },\n\n  createReview: async (reviewData: CreateReviewForm) => {\n    try {\n      const review = await publicApi.createReview(reviewData);\n      \n      // Upload image if provided\n      if (reviewData.image) {\n        await publicApi.uploadReviewImage(review.id, reviewData.image);\n      }\n\n      // Refresh reviews\n      await get().fetchReviews();\n      return true;\n    } catch (error) {\n      set({ error: apiUtils.handleApiError(error) });\n      return false;\n    }\n  },\n\n  deleteReview: async (id: number) => {\n    try {\n      await adminApi.deleteReview(id);\n      // Remove from local state\n      set(state => ({\n        reviews: state.reviews.filter(review => review.id !== id)\n      }));\n    } catch (error) {\n      set({ error: apiUtils.handleApiError(error) });\n      throw error;\n    }\n  },\n\n  toggleReviewVisibility: async (id: number) => {\n    try {\n      const review = get().reviews.find(r => r.id === id);\n      if (!review) return;\n\n      await adminApi.updateReview(id, { is_approved: !review.is_approved });\n      \n      // Update local state\n      set(state => ({\n        reviews: state.reviews.map(r => \n          r.id === id \n            ? { ...r, is_approved: !r.is_approved, is_visible: !r.is_approved }\n            : r\n        )\n      }));\n    } catch (error) {\n      set({ error: apiUtils.handleApiError(error) });\n      throw error;\n    }\n  },\n\n  updateFilters: (newFilters: Partial<ReviewFilters>) => {\n    set(state => ({\n      filters: { ...state.filters, ...newFilters },\n      filter: { ...state.filter, ...newFilters },\n      pagination: { ...state.pagination, page: 1 }, // Reset to first page\n    }));\n    // Auto-fetch with new filters\n    setTimeout(() => get().fetchReviews(), 100);\n  },\n\n  setFilter: (newFilter: ReviewFilters) => {\n    set(state => ({\n      filter: newFilter,\n      filters: newFilter,\n      pagination: { ...state.pagination, page: 1 },\n    }));\n  },\n\n  setPage: (page: number) => {\n    set(state => ({\n      pagination: { ...state.pagination, page },\n    }));\n    get().fetchReviews();\n  },\n\n  clearError: () => set({ error: null }),\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}