version: "3.9"

services:
  db:
    image: mariadb:11
    restart: unless-stopped
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: Kx9mP2vR8nQ5wE7tY3uI6oL1sA4hG9jB
      MYSQL_DATABASE: guestbook
      MYSQL_USER: guestuser
      MYSQL_PASSWORD: whHBJveMvwjs5a6p
      # Produktionsoptimierungen
      MYSQL_INNODB_BUFFER_POOL_SIZE: 256M
      MYSQL_INNODB_LOG_FILE_SIZE: 64M
    volumes:
    # Hauptdatenbank (persistent)
    - /volume2/docker/guestbook/db:/var/lib/mysql
    # Backup-Volume f√ºr automatische Backups
    - /volume2/docker/guestbook/backups:/backups
    healthcheck:
      test: [ "CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "root", "-pKx9mP2vR8nQ5wE7tY3uI6oL1sA4hG9jB" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
    - guestbook-network
    labels:
    - "com.centurylinklabs.watchtower.enable=false" # DB nicht automatisch updaten

  app:
    image: ghcr.io/baronblk/guestbook-project/combined:latest
    restart: unless-stopped
    platform: linux/amd64
    ports:
    - "3000:80"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: guestuser
      DB_PASSWORD: whHBJveMvwjs5a6p
      DB_NAME: guestbook
      JWT_SECRET_KEY: DeRBC3FDeY8d9nw9WMBwNJ0LpVyvB5ty607r2PHdmQBpqn
      ADMIN_USERNAME: admin
      ADMIN_EMAIL: support@dcng.de
      ADMIN_PASSWORD: whHBJveMvwjs5a6p
      # Produktionsumgebung
      NODE_ENV: production
      LOG_LEVEL: info
    volumes:
    # Upload-Dateien (persistent)
    - /volume2/docker/guestbook/uploads:/app/uploads
    # Logs (persistent)
    - /volume2/docker/guestbook/logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
    - guestbook-network
    labels:
    - "com.centurylinklabs.watchtower.enable=true" # App automatisch updaten

  # Automatischer Backup-Service
  db-backup:
    image: mariadb:11
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: Kx9mP2vR8nQ5wE7tY3uI6oL1sA4hG9jB
      DB_NAME: guestbook
      BACKUP_RETENTION_DAYS: 30
    volumes:
    - /volume2/docker/guestbook/backups:/backups
    command: >
      sh -c "
        echo 'Starting Guestbook Backup Service...'

        # Warte bis die Datenbank bereit ist
        while ! mariadb-admin ping -h db -u root -p$$DB_PASSWORD --silent; do
          echo 'Waiting for database to be ready...'
          sleep 10
        done
        echo 'Database is ready!'

        # Endlos-Schleife f√ºr regelm√§√üige Backups
        while true; do
          echo '=== Starting backup at' $$(date) '==='

          # Erstelle Backup mit Zeitstempel
          BACKUP_FILE=\"/backups/guestbook_backup_$$(date +%Y%m%d_%H%M%S).sql\"

          # F√ºhre Backup durch
          if mariadb-dump -h db -u root -p$$DB_PASSWORD --single-transaction --routines --triggers --complete-insert $$DB_NAME > \"$$BACKUP_FILE\"; then
            echo \"‚úÖ Backup created: $$BACKUP_FILE\"

            # Komprimiere das Backup
            gzip \"$$BACKUP_FILE\"
            echo \"‚úÖ Backup compressed: $$BACKUP_FILE.gz\"

            # Zeige Backup-Gr√∂√üe
            BACKUP_SIZE=$$(du -h \"$$BACKUP_FILE.gz\" | cut -f1)
            echo \"üì¶ Backup size: $$BACKUP_SIZE\"

            # Bereinige alte Backups
            DELETED_COUNT=$$(find /backups -name \"guestbook_backup_*.sql.gz\" -type f -mtime +$$BACKUP_RETENTION_DAYS -delete -print | wc -l)
            if [ $$DELETED_COUNT -gt 0 ]; then
              echo \"üóëÔ∏è  Deleted $$DELETED_COUNT old backup(s)\"
            fi

            echo \"‚úÖ Backup completed successfully!\"
          else
            echo \"‚ùå Backup failed!\"
          fi

          echo \"‚è±Ô∏è  Next backup in 6 hours...\"
          echo \"=== Backup cycle complete ===\"
          echo \"\"

          # Warte 6 Stunden (21600 Sekunden)
          sleep 21600
        done
      "
    networks:
    - guestbook-network
    labels:
    - "com.centurylinklabs.watchtower.enable=false" # Backup-Service nicht updaten

  # Watchtower f√ºr automatische Updates (optional, aber empfohlen)
  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Pr√ºfe alle 24 Stunden auf Updates
      WATCHTOWER_POLL_INTERVAL: 86400
      # Nur Container mit dem Label watchtower.enable=true updaten
      WATCHTOWER_LABEL_ENABLE: "true"
      # Bereinige alte Images nach Update
      WATCHTOWER_CLEANUP: "true"
      # Detaillierte Logs
      WATCHTOWER_DEBUG: "true"
    command: --label-enable --cleanup
    networks:
    - guestbook-network

networks:
  guestbook-network:
    driver: bridge
